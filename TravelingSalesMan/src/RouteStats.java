import java.text.NumberFormat;
import java.util.Locale;

/**
 * Class for Route. Holds the optimal route and the stats for it as well as public methods to manipulate data
 * @author Chris Bonilla, Amir Nouraie, Melissa Bayigamba
 *
 */

public class RouteStats {
	
	// Route Fields
	
	/**
	 * The Optimal Route
	 */
	private int[] Route;
	
	/**
	 * Distance Travled in Miles
	 */
	public double DistanceTraveled;
	
	/**
	 * Time Spent On Road in Hours
	 */
	private double TravelTime;
	
	/**
	 * Number of Cities on Tour
	 */
	public int NumCities;
	
	/**
	 * Total Revenue Generated by The Tour
	 */
	private double Revenue;

	/**
	 * Cost of Diesel Fuel for The Whole Trip
	 */
	private double FuelCost;

	/**
	 * Driver's Salary for the Tour
	 */
	private double DriverSalary;

	/**
	 * Tour Guide's Salary for the Tour
	 */
	private double GuideSalary;

	/**
	 * Total Cost of Lodging at Each City
	 */
	private double HotelCost;

	/**
	 * Total Cost for Meals and Attraction Tickets at Each City
	 */
	private double MealAttractionCost;

	/**
	 * Total Cost of Wear, Tear, Toll and Maintenance
	 */
	private double WTTMCost;

	/**
	 * Total Profit Made
	 */
	private double Profit;
	
	/**
	 * Basic Constructor to Initialize Fields for Route
	 */
	public RouteStats()
	{
		// Initialize Fields
		DistanceTraveled = 0;
		TravelTime = 0;
		NumCities = 0;
		Revenue = 0;
		FuelCost = 0;
		DriverSalary = 0;
		GuideSalary = 0;
		HotelCost = 0;
		MealAttractionCost = 0;
		WTTMCost = 0;
		Profit = 0;
	}
	
	/**
	 * Calculate all the data based on the route path
	 * @param Distances - The distance from city to city (need to calculate distance traveled)
	 */
	public void calculateStats(int[][] Distances)
	{
		calculateDistanceTraveled(Distances);
		TravelTime = DistanceTraveled/60;
		FuelCost = (DistanceTraveled / 8.0) * 3.25;
		DriverSalary = ((1000 * NumCities) + (DistanceTraveled * 0.55));
		GuideSalary = ((800 * NumCities) + (DistanceTraveled * 0.4));
		Revenue = 60 * 1945.0;
		HotelCost = NumCities * (90.0 * 62);
		MealAttractionCost = NumCities * (60.0 * 62);
		WTTMCost = DistanceTraveled * 0.60;
		Profit = Revenue - FuelCost - DriverSalary - GuideSalary - HotelCost - MealAttractionCost - WTTMCost;
	}
	
	/**
	 * Calculate total distance traveled by Route
	 * @param Distances - The distance from city to city, used to calculate total distance traveled
	 */
	private void calculateDistanceTraveled(int[][] Distances) {
		for (int i = 0; i < NumCities; i++)
		{
			DistanceTraveled += Distances[Route[i]][Route[i+1]];
		}
	}

	/**
	 * Print the Route (including distance from city to city)
	 * @param cities - Cities being visited on tour
	 * @param distances - distance from city to city
	 */
	public void printRoute(String[] cities, int[][] distances)
	{
		int i = 0;
		
		while (i + 1 <= NumCities)
		{
			System.out.println("Traveled from " + cities[Route[i]] + " to " + cities[Route[i+1]] + " in " + distances[Route[i]][Route[i+1]] + " miles.");
			i++;
		}
		
		System.out.println("");
	}
	
	/**
	 * Printe the Routes Stats (Distance Traveled, Fuel Cost, Profit, etc)
	 */
	public void printStats()
	{
		System.out.println("Total Distance Traveled: " + DistanceTraveled + " miles");
		System.out.println("Total Time Spent on the Road: " + String.format("%.2f", TravelTime) + " hours");
		System.out.println("Total Fuel Cost: " + NumberFormat.getCurrencyInstance(new Locale("en", "US")).format(FuelCost));
		System.out.println("Total Salary for Driver: " + NumberFormat.getCurrencyInstance(new Locale("en", "US")).format(DriverSalary));
		System.out.println("Total Salary for Tour Guide: " + NumberFormat.getCurrencyInstance(new Locale("en", "US")).format(GuideSalary));
		System.out.println("Total Revenue: " + NumberFormat.getCurrencyInstance(new Locale("en", "US")).format(Revenue));
		System.out.println("Total Cost of Hotel for All Guests: " + NumberFormat.getCurrencyInstance(new Locale("en", "US")).format(HotelCost));
		System.out.println("Total Meal and Attraction Ticket Costs: " + NumberFormat.getCurrencyInstance(new Locale("en", "US")).format(MealAttractionCost));
		System.out.println("Total Wear, Tear, Toll and Maintenance Cost: " + NumberFormat.getCurrencyInstance(new Locale("en", "US")).format(WTTMCost));
		System.out.println("Total Profit: " + NumberFormat.getCurrencyInstance(new Locale("en", "US")).format(Profit));
		System.out.println("");
	}
	
	/**
	 * Setter method for Route
	 * @param shortestRoute - the optimal path found
	 */
	public void storeRoute(int[] shortestRoute)
	{
		Route = shortestRoute;
	}

}
